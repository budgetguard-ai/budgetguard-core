generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UsageLedger {
  id        BigInt   @id @default(autoincrement())
  ts        DateTime @default(now())
  tenant    String
  route     String
  usd       Decimal
  promptTok Int
  compTok   Int
  tenantId  Int?
  tenantRef Tenant?  @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Tenant {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  rateLimitPerMin Int?
  alerts          Alert[]
  apiKeys         ApiKey[]
  audits          AuditLog[]
  budgets         Budget[]
  policies        PolicyBundle[]
  ledger          UsageLedger[]
}

model ApiKey {
  id         Int       @id @default(autoincrement())
  key        String    @unique
  tenantId   Int
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  tenant     Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Budget {
  id        Int       @id @default(autoincrement())
  tenantId  Int
  period    String
  amountUsd Decimal
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  tenant    Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model PolicyBundle {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  wasmPath  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Alert {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  type         String
  target       String
  thresholdUsd Decimal
  createdAt    DateTime @default(now())
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  actor     String
  event     String
  details   String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model ModelPricing {
  id               Int      @id @default(autoincrement())
  model            String   @unique
  versionTag       String
  inputPrice       Decimal
  cachedInputPrice Decimal
  outputPrice      Decimal
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         String   @default("openai")
}
